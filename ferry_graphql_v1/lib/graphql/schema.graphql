schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
columns and relationships of "countries"
"""
type countries {
  country: String!
  id: Int!
  image_url: String
}

"""
aggregated selection of "countries"
"""
type countries_aggregate {
  aggregate: countries_aggregate_fields
  nodes: [countries!]!
}

"""
aggregate fields of "countries"
"""
type countries_aggregate_fields {
  avg: countries_avg_fields
  count(columns: [countries_select_column!], distinct: Boolean): Int!
  max: countries_max_fields
  min: countries_min_fields
  stddev: countries_stddev_fields
  stddev_pop: countries_stddev_pop_fields
  stddev_samp: countries_stddev_samp_fields
  sum: countries_sum_fields
  var_pop: countries_var_pop_fields
  var_samp: countries_var_samp_fields
  variance: countries_variance_fields
}

"""aggregate avg on columns"""
type countries_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "countries". All fields are combined with a logical 'AND'.
"""
input countries_bool_exp {
  _and: [countries_bool_exp!]
  _not: countries_bool_exp
  _or: [countries_bool_exp!]
  country: String_comparison_exp
  id: Int_comparison_exp
  image_url: String_comparison_exp
}

"""
unique or primary key constraints on table "countries"
"""
enum countries_constraint {
  """unique or primary key constraint"""
  countries_pkey
}

"""
input type for incrementing numeric columns in table "countries"
"""
input countries_inc_input {
  id: Int
}

"""
input type for inserting data into table "countries"
"""
input countries_insert_input {
  country: String
  id: Int
  image_url: String
}

"""aggregate max on columns"""
type countries_max_fields {
  country: String
  id: Int
  image_url: String
}

"""aggregate min on columns"""
type countries_min_fields {
  country: String
  id: Int
  image_url: String
}

"""
response of any mutation on the table "countries"
"""
type countries_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [countries!]!
}

"""
on_conflict condition type for table "countries"
"""
input countries_on_conflict {
  constraint: countries_constraint!
  update_columns: [countries_update_column!]! = []
  where: countries_bool_exp
}

"""Ordering options when selecting data from "countries"."""
input countries_order_by {
  country: order_by
  id: order_by
  image_url: order_by
}

"""primary key columns input for table: countries"""
input countries_pk_columns_input {
  id: Int!
}

"""
select columns of table "countries"
"""
enum countries_select_column {
  """column name"""
  country

  """column name"""
  id

  """column name"""
  image_url
}

"""
input type for updating data in table "countries"
"""
input countries_set_input {
  country: String
  id: Int
  image_url: String
}

"""aggregate stddev on columns"""
type countries_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type countries_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type countries_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type countries_sum_fields {
  id: Int
}

"""
update columns of table "countries"
"""
enum countries_update_column {
  """column name"""
  country

  """column name"""
  id

  """column name"""
  image_url
}

"""aggregate var_pop on columns"""
type countries_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type countries_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type countries_variance_fields {
  id: Float
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "Products"
  """
  delete_Products(
    """filter the rows which have to be deleted"""
    where: Products_bool_exp!
  ): Products_mutation_response

  """
  delete single row from the table: "Products"
  """
  delete_Products_by_pk(id: Int!): Products

  """
  delete data from the table: "countries"
  """
  delete_countries(
    """filter the rows which have to be deleted"""
    where: countries_bool_exp!
  ): countries_mutation_response

  """
  delete single row from the table: "countries"
  """
  delete_countries_by_pk(id: Int!): countries

  """
  insert data into the table: "Products"
  """
  insert_Products(
    """the rows to be inserted"""
    objects: [Products_insert_input!]!

    """upsert condition"""
    on_conflict: Products_on_conflict
  ): Products_mutation_response

  """
  insert a single row into the table: "Products"
  """
  insert_Products_one(
    """the row to be inserted"""
    object: Products_insert_input!

    """upsert condition"""
    on_conflict: Products_on_conflict
  ): Products

  """
  insert data into the table: "countries"
  """
  insert_countries(
    """the rows to be inserted"""
    objects: [countries_insert_input!]!

    """upsert condition"""
    on_conflict: countries_on_conflict
  ): countries_mutation_response

  """
  insert a single row into the table: "countries"
  """
  insert_countries_one(
    """the row to be inserted"""
    object: countries_insert_input!

    """upsert condition"""
    on_conflict: countries_on_conflict
  ): countries

  """
  update data of the table: "Products"
  """
  update_Products(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Products_set_input

    """filter the rows which have to be updated"""
    where: Products_bool_exp!
  ): Products_mutation_response

  """
  update single row of the table: "Products"
  """
  update_Products_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: Products_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Products_set_input
    pk_columns: Products_pk_columns_input!
  ): Products

  """
  update data of the table: "countries"
  """
  update_countries(
    """increments the numeric columns with given value of the filtered values"""
    _inc: countries_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: countries_set_input

    """filter the rows which have to be updated"""
    where: countries_bool_exp!
  ): countries_mutation_response

  """
  update single row of the table: "countries"
  """
  update_countries_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: countries_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: countries_set_input
    pk_columns: countries_pk_columns_input!
  ): countries
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "Products"
"""
type Products {
  id: Int!
  product: String!
  product_img: String!
}

"""
aggregated selection of "Products"
"""
type Products_aggregate {
  aggregate: Products_aggregate_fields
  nodes: [Products!]!
}

"""
aggregate fields of "Products"
"""
type Products_aggregate_fields {
  avg: Products_avg_fields
  count(columns: [Products_select_column!], distinct: Boolean): Int!
  max: Products_max_fields
  min: Products_min_fields
  stddev: Products_stddev_fields
  stddev_pop: Products_stddev_pop_fields
  stddev_samp: Products_stddev_samp_fields
  sum: Products_sum_fields
  var_pop: Products_var_pop_fields
  var_samp: Products_var_samp_fields
  variance: Products_variance_fields
}

"""aggregate avg on columns"""
type Products_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "Products". All fields are combined with a logical 'AND'.
"""
input Products_bool_exp {
  _and: [Products_bool_exp!]
  _not: Products_bool_exp
  _or: [Products_bool_exp!]
  id: Int_comparison_exp
  product: String_comparison_exp
  product_img: String_comparison_exp
}

"""
unique or primary key constraints on table "Products"
"""
enum Products_constraint {
  """unique or primary key constraint"""
  Products_pkey
}

"""
input type for incrementing numeric columns in table "Products"
"""
input Products_inc_input {
  id: Int
}

"""
input type for inserting data into table "Products"
"""
input Products_insert_input {
  id: Int
  product: String
  product_img: String
}

"""aggregate max on columns"""
type Products_max_fields {
  id: Int
  product: String
  product_img: String
}

"""aggregate min on columns"""
type Products_min_fields {
  id: Int
  product: String
  product_img: String
}

"""
response of any mutation on the table "Products"
"""
type Products_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Products!]!
}

"""
on_conflict condition type for table "Products"
"""
input Products_on_conflict {
  constraint: Products_constraint!
  update_columns: [Products_update_column!]! = []
  where: Products_bool_exp
}

"""Ordering options when selecting data from "Products"."""
input Products_order_by {
  id: order_by
  product: order_by
  product_img: order_by
}

"""primary key columns input for table: Products"""
input Products_pk_columns_input {
  id: Int!
}

"""
select columns of table "Products"
"""
enum Products_select_column {
  """column name"""
  id

  """column name"""
  product

  """column name"""
  product_img
}

"""
input type for updating data in table "Products"
"""
input Products_set_input {
  id: Int
  product: String
  product_img: String
}

"""aggregate stddev on columns"""
type Products_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type Products_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type Products_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type Products_sum_fields {
  id: Int
}

"""
update columns of table "Products"
"""
enum Products_update_column {
  """column name"""
  id

  """column name"""
  product

  """column name"""
  product_img
}

"""aggregate var_pop on columns"""
type Products_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type Products_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type Products_variance_fields {
  id: Float
}

type query_root {
  """
  fetch data from the table: "Products"
  """
  Products(
    """distinct select on columns"""
    distinct_on: [Products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Products_order_by!]

    """filter the rows returned"""
    where: Products_bool_exp
  ): [Products!]!

  """
  fetch aggregated fields from the table: "Products"
  """
  Products_aggregate(
    """distinct select on columns"""
    distinct_on: [Products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Products_order_by!]

    """filter the rows returned"""
    where: Products_bool_exp
  ): Products_aggregate!

  """fetch data from the table: "Products" using primary key columns"""
  Products_by_pk(id: Int!): Products

  """
  fetch data from the table: "countries"
  """
  countries(
    """distinct select on columns"""
    distinct_on: [countries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [countries_order_by!]

    """filter the rows returned"""
    where: countries_bool_exp
  ): [countries!]!

  """
  fetch aggregated fields from the table: "countries"
  """
  countries_aggregate(
    """distinct select on columns"""
    distinct_on: [countries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [countries_order_by!]

    """filter the rows returned"""
    where: countries_bool_exp
  ): countries_aggregate!

  """fetch data from the table: "countries" using primary key columns"""
  countries_by_pk(id: Int!): countries
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

type subscription_root {
  """
  fetch data from the table: "Products"
  """
  Products(
    """distinct select on columns"""
    distinct_on: [Products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Products_order_by!]

    """filter the rows returned"""
    where: Products_bool_exp
  ): [Products!]!

  """
  fetch aggregated fields from the table: "Products"
  """
  Products_aggregate(
    """distinct select on columns"""
    distinct_on: [Products_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Products_order_by!]

    """filter the rows returned"""
    where: Products_bool_exp
  ): Products_aggregate!

  """fetch data from the table: "Products" using primary key columns"""
  Products_by_pk(id: Int!): Products

  """
  fetch data from the table: "countries"
  """
  countries(
    """distinct select on columns"""
    distinct_on: [countries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [countries_order_by!]

    """filter the rows returned"""
    where: countries_bool_exp
  ): [countries!]!

  """
  fetch aggregated fields from the table: "countries"
  """
  countries_aggregate(
    """distinct select on columns"""
    distinct_on: [countries_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [countries_order_by!]

    """filter the rows returned"""
    where: countries_bool_exp
  ): countries_aggregate!

  """fetch data from the table: "countries" using primary key columns"""
  countries_by_pk(id: Int!): countries
}

